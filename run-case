#!/bin/bash

# Declare the top-level directory and the program script.
projdir=~/sandbox/dmswarm-hybrid
runprog=${projdir}/run.sh

# Define the help text.
show_help() {
    printf "
This is a collection of aliases for ${runprog}.
Each case is keyed by a unique string. For example,

``$ ./run-case default``

is equivalent to

``$ cd ${projdir}``
``$ ./run.sh -Nx 8 -Ny 8 -Nz 8``
"
}

# Set up the mapping from name to function.
declare -A case_map

# Define the case functions.
run_default() {
    ./run.sh \
        -Nx 8 -Ny 8 -Nz 8 \
        ${1}
}
case_map['default']=run_default
run_test_collection_8cubed() {
    ./run.sh \
        -Nx 8 -Ny 8 -Nz 8 \
        -Np 1024 \
        -n 1 \
        -x1 0.8 -y1 0.8 -z1 0.8 \
        --lhs-type laplacian --rhs-type sinusoidal \
        ${1}
}
case_map['test-collection-8cubed']=run_test_collection_8cubed
run_test_collisions_8cubed() {
    ./run.sh \
        -Nx 8 -Ny 8 -Nz 8 \
        -Np 1024 \
        -n 1 \
        -mi 5e-26 \
        -mn 4.6e-26 \
        -Tn 300.0 \
        -Ti 300.0 \
        -dt 1e-5 \
        -nui 5e3 \
        -x1 0.8 -y1 0.8 -z1 0.8 \
        --lhs-type laplacian --rhs-type sinusoidal \
        ${1}
}
case_map['test-collisions-8cubed']=run_test_collisions_8cubed
run_test_collection_asymmetric() {
    ./run.sh \
        -Nx 15 -Ny 10 -Nz 8 \
        -Np 1200 \
        -n 1 \
        --lhs-type laplacian --rhs-type sinusoidal \
        ${1}
}
case_map['test-collection-asymmetric']=run_test_collection_asymmetric
run_test_collection_32cubed() {
    ./run.sh \
        -Nx 64 -Ny 64 -Nz 64 \
        -Np 1048576 \
        -n 1 \
        --lhs-type laplacian --rhs-type sinusoidal \
        ${1}
}
case_map['test-collection-32cubed']=run_test_collection_32cubed
run_test_collection_long_x() {
    ./run.sh \
        -Nx 32 -Ny 8 -Nz 8 \
        -x1 4.0 -y1 1.0 -z1 1.0 \
        -Np 1000000 \
        -n 1 \
        --density-type sinusoidal \
        --lhs-type laplacian --rhs-type sinusoidal \
        ${1}
}
case_map['test-collection-long-x']=run_test_collection_long_x
run_gamg_basic() {
    ./run.sh \
        -ksp_monitor_short \
        -ksp_type gmres \
        -ksp_max_it 100 \
        -pc_type gamg \
        -pc_gamg_type agg \
        -Nx 16 -Ny 16 -Nz 16 -n 2 \
        ${1}
}
case_map['gamg-basic']=run_gamg_basic
run_basic_physics() {
    ./run.sh \
        -ksp_type gmres \
        -ksp_max_it 100 \
        -pc_type jacobi \
        -Nx 64 -Ny 64 -Nz 64 \
        -n 1 \
        -Nt 10 \
        -dt 1e-5 \
        -nue 5e4 \
        -nui 3e3 \
        -B0z 5e-5 \
        -E0y 5e-2 \
        -mi 5.0e-26 \
        -mn 4.6e-26 \
        -Te 600 \
        -Ti 300 \
        -Tn 300 \
        -ksp_monitor_short \
        -ksp_converged_reason \
        ${1}
}
case_map['basic-physics']=run_basic_physics

# Define a function to print names of registered cases.
show_cases() {
    echo
    echo "The following cases are available:"
    for key in "${!case_map[@]}"; do
        echo "+ $key"
    done
    echo
}

# Define the function that will run a registered case.
run_case() {
    if [ -z "${1}" ]; then
        # Exit with an error if the user didn't provide a name.
        echo "Got an empty name. Exiting."
        exit 1
    fi
    if [ -v case_map[${1}] ]; then
        # Move the runtime directory to the top of the stack.
        pushd "${projdir}" &> /dev/null
        # Run the case.
        ${case_map[${1}]} --verbose
        # Remove the runtime directory from the stack.
        popd &> /dev/null
    else
        # Exit with an error if we don't recognize the case name.
        echo "Unknown case: \"${1}\""
        exit 1
    fi
}

# Read CLI input.
case "${1}" in
    -h | --help )
        show_help
        exit
        ;;
    --show-cases )
        show_cases
        exit
        ;;
    * )
        run_case "${1}"
        exit
        ;;
esac

